Florian Wernthaler
flw5
Jordan McGilvery
jmm225

Questions here will come from the assignment
writeup. Be sure to copy paste questions and 
your explanations before you push to GitHub and
do that before uploading to Gradescope

(1) Are the benchmark timings for StringStrand consistent with the explanation
below that the time to execute cutAndSplice is O(b^2(S))?
Note that the value of b is half the number of calls to append since each cut
(except the first) is modeled by two calls of append in the method cutAndSplice
-- see the code. This means that b2 will be constant in the benchmark, but S
will vary. 

Yes, they are consistent. Since b^2 is constant and S (the length of the splicee) varies, one would
expect the time to be proportional to S (e.g. time approximately doubles if S doubles). The data
set above roughly follows this pattern, especially for longer splicees (as would be expected,
because when S is shorter, E (the length of the enzyme) has a greater effect on the time, while
when S is longer, E can essentially be ignored). For example, the last S is double the previous S,
and the last time (144.978) is almost exactly double the second-to-last time (77.514).

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringStrand:	            256	      4,800,471	0.679	1290
StringStrand:	            512	      4,965,591	0.811	1290
StringStrand:	          1,024	      5,295,831	0.832	1290
StringStrand:	          2,048	      5,956,311	0.844	1290
StringStrand:	          4,096	      7,277,271	1.081	1290
StringStrand:	          8,192	      9,919,191	1.866	1290
StringStrand:	         16,384	     15,203,031	2.866	1290
StringStrand:	         32,768	     25,770,711	5.668	1290
StringStrand:	         65,536	     46,906,071	9.829	1290
StringStrand:	        131,072	     89,176,791	19.770	1290
StringStrand:	        262,144	    173,718,231	45.404	1290
StringStrand:	        524,288	    342,801,111	77.514	1290
StringStrand:	      1,048,576	    680,966,871	144.978	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at StringStrand.append(StringStrand.java:70)
	at IDnaStrand.cutAndSplice(IDnaStrand.java:37)
	at DNABenchmark.lambda$0(DNABenchmark.java:76)
	at DNABenchmark$$Lambda$145/371800738.run(Unknown Source)
	at java.base/java.lang.Thread.run(Unknown Source)
	at DNABenchmark.strandSpliceBenchmark(DNABenchmark.java:79)
	at DNABenchmark.main(DNABenchmark.java:113)


(2) Are the benchmark timings for StringBuilderStrand consistent with the
explanation below that the time to execute cutAndSplice is O(bS)?
Note that the value of b is half the number of calls to append since each cut
(except the first) is modeled by two calls of append in the method cutAndSplice
-- see the code. This means that b2 will be constant in the benchmark, but S
will vary. 

Yes, they are consistent. All the timings are considerably faster than the times for StringStrand,
which is to be expected, since StringStrand is O(b^2(S)). Since b is constant, we would expect the
times to increase proportionally as s is increased. S doubles with each successive test, so we
would expect time to roughly double if it is O(bS), which it approximately does for the last three
tests. The initial tests don’t show much of a consistent pattern in terms of time changes, which is
likely due to internal factors in the computer’s timing mechanism. Also, it is worth noting that
because of the increased efficiency of StringBuilderStrand, small splicees and correspondingly
small strand lengths take a very small amount of time to build. Because of this, increasing a
strand by a small amount of nucleotides shouldn’t affect the runtime that much, if it is truly
O(bS). Compared to an efficiency of O(b^2(S)), we should see a much smaller difference in times for
the shorter strands. This is reflected in the benchmark times. 

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringBuilderStrand:	            256	      4,800,471	0.028	1290
StringBuilderStrand:	            512	      4,965,591	0.020	1290
StringBuilderStrand:	          1,024	      5,295,831	0.009	1290
StringBuilderStrand:	          2,048	      5,956,311	0.009	1290
StringBuilderStrand:	          4,096	      7,277,271	0.010	1290
StringBuilderStrand:	          8,192	      9,919,191	0.009	1290
StringBuilderStrand:	         16,384	     15,203,031	0.016	1290
StringBuilderStrand:	         32,768	     25,770,711	0.045	1290
StringBuilderStrand:	         65,536	     46,906,071	0.060	1290
StringBuilderStrand:	        131,072	     89,176,791	0.139	1290
StringBuilderStrand:	        262,144	    173,718,231	0.209	1290
StringBuilderStrand:	        524,288	    342,801,111	0.370	1290
StringBuilderStrand:	      1,048,576	    680,966,871	0.691	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Unknown Source)
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(Unknown Source)
	at java.base/java.lang.AbstractStringBuilder.append(Unknown Source)
	at java.base/java.lang.StringBuilder.append(Unknown Source)
	at StringBuilderStrand.append(StringBuilderStrand.java:70)
	at IDnaStrand.cutAndSplice(IDnaStrand.java:41)
	at DNABenchmark.strandSpliceBenchmark(DNABenchmark.java:67)
	at DNABenchmark.main(DNABenchmark.java:113)


(3) Explain why the time for LinkStrand does not change much at all over all
the runs in the benchmark program. Explain why you think memory is exhausted at
the specific strand size you see in your timings -- as compared to exhaustion
for String and StringBuilder.

The time doesn’t change much because the node for the splicee is only created once. The splicee is
not re-created at every recombination site; its node is simply linked in. Linking in the node is an
O(1) operation, and because of this, no matter how long the splicee is, the time required is
insignificant. Creating the node for the splicee one time hardly takes any time at all. 
Memory is exhausted with a strand of size 692,568,111,831 for LinkStrand, which is a lot larger
than when memory is exhausted for String and StringBuilder (which are exhausted at strands of
length 680,966,871). This occurs because in LinkStrand the node for the splicee is only created
once, so each time the splicee is put into the new strand, it is simply linked in. Because only one
copy of the splicee is needed, this saves a lot more memory compared to String and StringBuilder,
each of which re-generate a new string for the splicee every time. These extra copies of the
splicee cause String and StringBuilder to use up much more memory for strands compared to
LinkStrand, which allows LinkStrand to build much longer Strands before it runs out of memory.

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
LinkStrand:	            256	      4,800,471	0.028	1290
LinkStrand:	            512	      4,965,591	0.021	1290
LinkStrand:	          1,024	      5,295,831	0.006	1290
LinkStrand:	          2,048	      5,956,311	0.004	1290
LinkStrand:	          4,096	      7,277,271	0.005	1290
LinkStrand:	          8,192	      9,919,191	0.007	1290
LinkStrand:	         16,384	     15,203,031	0.004	1290
LinkStrand:	         32,768	     25,770,711	0.005	1290
LinkStrand:	         65,536	     46,906,071	0.006	1290
LinkStrand:	        131,072	     89,176,791	0.006	1290
LinkStrand:	        262,144	    173,718,231	0.006	1290
LinkStrand:	        524,288	    342,801,111	0.005	1290
LinkStrand:	      1,048,576	    680,966,871	0.007	1290
LinkStrand:	      2,097,152	  1,357,298,391	0.005	1290
LinkStrand:	      4,194,304	  2,709,961,431	0.008	1290
LinkStrand:	      8,388,608	  5,415,287,511	0.004	1290
LinkStrand:	     16,777,216	 10,825,939,671	0.004	1290
LinkStrand:	     33,554,432	 21,647,243,991	0.006	1290
LinkStrand:	     67,108,864	 43,289,852,631	0.007	1290
LinkStrand:	    134,217,728	 86,575,069,911	0.006	1290
LinkStrand:	    268,435,456	173,145,504,471	0.007	1290
LinkStrand:	    536,870,912	346,286,373,591	0.008	1290
LinkStrand:	  1,073,741,824	692,568,111,831	0.008	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Unknown Source)
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(Unknown Source)
	at java.base/java.lang.AbstractStringBuilder.append(Unknown Source)
	at java.base/java.lang.StringBuilder.append(Unknown Source)
	at DNABenchmark.main(DNABenchmark.java:110)